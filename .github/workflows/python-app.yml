# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  health-check-job:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with Django
      run: |
        python manage.py test

  app-package-job: 
    runs-on: ubuntu-latest
    needs: [health-check-job] 
    if: ${{ github.event_name == 'push' }} 
    steps:
      - name: Checkout Code 
        uses: actions/checkout@v2
      - name: Build & Publish Image 
        uses: docker/build-push-action@v1
        env:
          app_name: demo-app
        with:
          username: ${{ secrets.DOCKER_USER }} 
          password: ${{ secrets.DOCKER_PASSWORD }} 
          dockerfile: "Dockerfile.app"
          tag_with_sha: true 
          repository: "demo-app"
  
  worker-package-job:
    runs-on: ubuntu-latest
    needs: [health-check-job] 
    if: ${{ github.event_name == 'push' }} 
    steps:
      - name: Checkout Code 
        uses: actions/checkout@v2
      - name: Build & Publish Image 
        uses: docker/build-push-action@v1
        env:
          app_name: demo-worker
        with:
          username: ${{ secrets.DOCKER_USER }} 
          password: ${{ secrets.DOCKER_PASSWORD }} 
          dockerfile: "Dockerfile.worker"
          tag_with_sha: true 
          repository: "demo-worker"

  deploy-job: 
      runs-on: ubuntu-latest
      needs: [app-package-job, worker-package-job] 
      if: ${{ github.event_name == 'push' }} # will be fire if the trigger event is a push event.
      steps:
        - name: Checkout code # checking out code.
          uses: actions/checkout@v2
        - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
          id: repo
          run: echo "::set-output name=releaseTag::sha-$(git rev-parse --short HEAD)" 
        - name: Install Helm # helm installation in our runner for deploying.
          run: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
        - name: Helm Deploy # deploying our helm chart to our cluster
          run: >
            helm upgrade
            --install
            --set global.image.releaseTag=${{ steps.repo.outputs.releaseTag }}
            --set user=${{ secrets.DB_USER }}
            --set password=${{ secrets.DB_PASSWORD }}
            --set host=${{ secrets.DB_HOST }}
            --set port=${{ secrets.DB_PORT }}
            --set name=${{ secrets.DB_NAME }}
            --wait
            --atomic
            --dry-run --debug
            apidemo
            ./k8s